@model ProductDetailsModel.ProductBreadcrumbModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo

@inject CommonSettings commonSettings
@inject SeoSettings seoSettings

@{
    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@if (Model.Enabled)
{
    <div class="container">
        <div class="breadcrumb">
            <ul>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBreadcrumbBefore, additionalData = Model })
                <li>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                        <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z" />
                    </svg>
                    <span>
                        <a href="@Url.RouteUrl("Homepage")">
                            <span>@T("Products.Breadcrumb.Top")</span>
                        </a>
                    </span>
                    <span class="delimiter">@breadcrumbDelimiter</span>
                </li>
                @foreach (var category in Model.CategoryBreadcrumb)
                {
                    <li>
                        <a href="@(Url.RouteUrl<Category>(new { SeName = category.SeName }))">
                            <span>@category.Name</span>
                        </a>
                        <span class="delimiter">@breadcrumbDelimiter</span>
                    </li>
                }
                <li>
                    @{
                        if (Model.ProductName.Length > 50)
                        {
                            <strong class="current-item">
                                @Model.ProductName.Substring(0, 50) . . . . . 
                            </strong>
                        }
                        else
                        {
                            <strong class="current-item">
                                @Model.ProductName
                            </strong>
                        }
                    }
                    <span id="@(Url.RouteUrl<Product>(new { SeName = Model.ProductSeName }))"></span>
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBreadcrumbAfter, additionalData = Model })
                </li>
            </ul>
            @if (seoSettings.MicrodataEnabled)
            {
                <script type="application/ld+json">
                    @Html.Raw(Model.JsonLd)
                </script>
            }
        </div>
    </div>
}